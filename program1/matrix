#!/bin/bash 

function dtmInputChecker(){ 
  # NAME
  #   dtmInputChecker - Process matrix input and save data to temp file, or catch an error if input is invalid.
  # SYNOPSIS
  #   dtmInputChecker TEMPFILE MATRIX
  # DESCRIPTION
  #   Input checker for dims, transpose, and mean functions.
  #   Store data in matrix file to temp file.
  #   If function takes in no matrix file, let user type a matrix.
  #   If function takes in a matrix file, read a file and store data to temp file.
  #   If matrix file is not readable or number of arguments of matrix file is greater than 1, catch error and return 1.
  # AUTHOR
  #   Written by Kyeong-nam Kim
if [ "$#" = "1" ] # If input type is stdin, 
then
    cat > "$1" # let user type a matrix and store data to a temp file.
elif [ "$#" = "2" ] # If input type is file, 
then
    # Check if input file is readable
    if [ -f "$2" ] # Read a file 
    then
        echo "$2 exists" >/dev/null # Yes, file readable. Do nothing.
    else
        echo "$2 does NOT EXIST!!" >&2 # File is not readable. Error to stderr and return 1.
        return 1
    fi
    # Read a valid file and store data to temp file.
    cat "$2" > "$1"
else # If number of arguments is more than 1 (invalid), error to stderr and return 1.
    echo "You have more than 1 argument. This is INVALID!!" >&2
    return 1
fi
}

function dims(){
  # NAME
  #   dims - Outputs the dimensions of a matrix.
  # SYNOPSIS
  #   dims MATRIX
  # DESCRIPTION
  #   Outputs dimensions of a matrix.
  #   Prints "ROWS COLS" to stdout.
  # AUTHOR
  #   Written by Kyeong-nam Kim

# Temp file to store input data.
datafilepath="datafile$$" 

# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
trap "rm -f $datafilepath; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

# Execute input checking function
dtmInputChecker "$datafilepath" "${@:1}"

if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
then
    return 1
else # Implement dims operation
    rowNum=$(wc -l <"$datafilepath") # Count number of lines of input file.
    firstline=$(head -n 1 "$datafilepath") # First line of input file.
    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which is the number of columns.

    echo "$rowNum $colNum" # Print out result.

    rm -f "$datafilepath" # Delete a temp file.

    return 0 # Program implemented as desired.
fi
}

function transpose(){
  # NAME
  #   transpose - Output the transpose of the input.
  # SYNOPSIS
  #   transpose MATRIX
  # DESCRIPTION
  #   Outputs the transpose of the input matrix. 
  # AUTHOR
  #   Written by Kyeong-nam Kim

# Temp files to store input data.
datafilepath="datafile$$" # To store input file.
output="matrixfile$$" # To store output matrix.

# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
trap "rm -f $datafilepath $output; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

# Execute input checking function
dtmInputChecker "$datafilepath" "${@:1}"

if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
then
    return 1
else # Implement transpose operation
    firstline=$(head -n 1 "$datafilepath") # First line of input file.
    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which is the number of columns.

    # Process:
    # Traverse columns and cut each field.
    # Echo each column and translate whitespaces to tab, and append it to temp file.
    # e.g., let's say we have a matrix like below. 
    #                1  2  3  4
    #                5  6  7  8
    #                9 10 11 12
    # The variable 'colToRow' will store 1 5 9, and the line is delimited by whitespaces.
    # We translate all whitespace in the line to tab, and append the row to output file.
    # Repeat this process for all columns.
    i=0
    while [ "$i" -lt "$colNum" ] # Traverse input matrix columns. 
    do
        ((i++)) 
        colToRow=$(cut -f "$i" "$datafilepath") # Cut column by field and store it to variable in form of row.
	echo $colToRow | tr ' ' '\t' >> "$output" # Translate whitespaces to tab, and append column to temp file for output.
    done    	

    cat "$output" # Display the transpose of the input matrix.

    rm -f "$datafilepath" "$output" # Delete temp files.

    return 0 # Program implemented as desired.
fi
}

function mean(){
  # NAME
  #   mean - 
  # SYNOPSIS
  #   mean MATRIX
  # DESCRIPTION
  #   O
  #   P
  # AUTHOR
  #   Written by Kyeong-nam Kim

# Temp file to store input data.
datafilepath="datafile$$" 

# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
trap "rm -f $datafilepath; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

# Execute input checking function
dtmInputChecker "$datafilepath" "${@:1}"

if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
then
    return 1
else # Implement mean operation


    rm -f "$datafilepath" # Delete a temp file

    return 0 # Program implemented as desired.
fi
}
# Main program starts from here
$1 "${@:2}"

# Check return value => NEED TO DELETE before SUBMISSION!!!!!!!!!!!!!!!!!!!!!!!!!!!
if [ $? -ne 0 ]
then
    echo "stdERR"
else
    echo "stdOUT"
fi
