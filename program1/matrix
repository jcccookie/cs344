#!/bin/bash 

function dtmInputChecker(){ 
  # NAME
  #   dtmInputChecker - Process matrix input and save data to temp file, or catch an error if input is invalid.
  # SYNOPSIS
  #   dtmInputChecker TEMPFILE MATRIX
  # DESCRIPTION
  #   Input checker for dims, transpose, and mean functions.
  #   Store data in matrix file to temp file.
  #   If function takes in no matrix file, let user type a matrix.
  #   If function takes in a matrix file, read a file and store data to temp file.
  #   If matrix file is not readable or number of arguments of matrix file is greater than 1, catch error and return 1.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	if [ "$#" = "1" ] # If input type is stdin, 
	then
	    cat > "$1" # let user type a matrix and store data to a temp file.
	elif [ "$#" = "2" ] # If input type is file, 
	then
	    # Check if input file is readable
	    if [ -f "$2" ] # Read a file 
	    then
		echo "$2 exists" >/dev/null # Yes, file readable. Do nothing.
	    else
		echo "$2 is NOT readable!! Check the name of the file." >&2 # File is not readable. Error to stderr and return 1.
		return 1
	    fi
	    # Read a valid file and store data to temp file.
	    cat "$2" > "$1"
	else # If number of arguments is more than 1 (invalid), error to stderr and return 1.
	    echo "You have more than 1 argument. This is INVALID!!" >&2
	    return 1
	fi
}

function dims(){
  # NAME
  #   dims - Outputs the dimensions of a matrix.
  # SYNOPSIS
  #   dims MATRIX
  # DESCRIPTION
  #   Outputs dimensions of a matrix.
  #   Prints "ROWS COLS" to stdout.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	# Temp file to store input data.
	datafilepath="datafile$$" 

	# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
	trap "rm -f $datafilepath; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

	# Execute input checking function
	dtmInputChecker "$datafilepath" "${@:1}"

	if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
	then
	    return 1
	else # Implement dims operation
	    rowNum=$(wc -l <"$datafilepath") # Count number of lines of input file.
	    firstline=$(head -n 1 "$datafilepath") # First line of input file.
	    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which represents the number of columns.

	    echo "$rowNum $colNum" # Print out result.

	    rm -f "$datafilepath" # Delete a temp file.

	    return 0 # Program implemented as desired.
	fi
}

function transpose(){
  # NAME
  #   transpose - Output the transpose of the input.
  # SYNOPSIS
  #   transpose MATRIX
  # DESCRIPTION
  #   Outputs the transpose of the input matrix. 
  # AUTHOR
  #   Written by Kyeong-nam Kim

	# Temp files to store input data.
	datafilepath="datafile$$" # To store input file.
	output="matrixfile$$" # To store output matrix.

	# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
	trap "rm -f $datafilepath $output; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

	# Execute input checking function
	dtmInputChecker "$datafilepath" "${@:1}"

	if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
	then
	    return 1
	else # Implement transpose operation
	    # Process:
	    # Traverse every column as a whole and cut it.
	    # Echo each column and translate whitespaces to tab, and append it to temp file.
	    # e.g., let's say we have a matrix like below. 
	    #                1  2  3  4
	    #                5  6  7  8
	    #                9 10 11 12
	    # We traverse all columns by field, and the first candidate is  1
	    # 				  				    5	        
	    # 								    9	
	    # We cut this column and store it to a variable.
	    # When the variable is sent out to stdout, the data inside is delimited by whitespaces, '1 5 9'.
	    # Then, we translate all whitespace in the line to tab, and append the row to output file.
	    # Repeat this process for all columns.

	    firstline=$(head -n 1 "$datafilepath") # First line of input file.
	    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which represents the number of columns.

	    i=0
	    while [ "$i" -lt "$colNum" ] # Traverse input matrix columns. 
	    do
		((i++)) 
		col=$(cut -f "$i" "$datafilepath") # Cut column by field and store it to variable.
		echo $col | tr ' ' '\t' >> "$output" # Stdout data by echo, translate whitespaces to tab, and append data to temp file for output.
	    done    	

	    cat "$output" # Display the transpose of the input matrix.

	    rm -f "$datafilepath" "$output" # Delete temp files.

	    return 0 # Program implemented as desired.
	fi
}

function mean(){
  # NAME
  #   mean - Outputs the 1xN row vector, where the first element is the mean of each column.
  # SYNOPSIS
  #   mean MATRIX
  # DESCRIPTION
  #   Outputs the mean of each column in integers in form of 1xN row vector.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	# Temp file to store input data.
	datafilepath="datafile$$" 
	# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
	trap "rm -f $datafilepath; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

	# Execute input checking function
	dtmInputChecker "$datafilepath" "${@:1}"

	if [ $? -eq 1 ] # If there is an error caught by dtmInputChecker, return 1.
	then
	    return 1
	else # Implement mean operation
	    # Process:
	    # Traverse every column as a whole, and cut each field.
	    # Calculate the total sum of a column by iterating through the values in the variable.
	    # Calculate the average of each column by dividing the total sum by the number of rows of the matrix.
	    # Repeat this for all columns.

	    rowNum=$(wc -l <"$datafilepath") # Count number of rows of input file.
	    firstline=$(head -n 1 "$datafilepath") # First line of input file.
	    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which represents the number of columns.

	    # Calculate sum of columns of input matrix and print it out.
	    i=0
	    while [ "$i" -lt "$colNum" ] # Traverse input matrix columns. 
	    do
		((i++)) 
		col=$(cut -f "$i" "$datafilepath") # Cut column by field and store it to variable.
		sum=0 # Sum of all values in a column.
		for val in $col # Loop through values in a column.
		do
		    sum=`expr $sum + $val` # Calculate total sum of values in a column.
		done

		mean=$(( ($sum + ($rowNum/2)*( ($sum>0)*2-1 )) / $rowNum  )) # Calculate an average of values in a column by dividing total sum by the number of row.
		echo -n "$mean" # echo the average value without a newline.

	        # This is to properly print out the values in matrix form.
		if [ "$i" -ne "$colNum" ] # Unless it is not the last column,
		then
		    echo -ne "\t" # add a tab after the mean. 
		else # If it is the last column,
		    echo # add a newline to the last mean.
		fi	
	    done    	

	    rm -f "$datafilepath" # Delete a temp file.

	    return 0 # Program implemented as desired.
	fi
}

function addMulInputChecker(){ 
  # NAME
  #   addMulInputChecker - Process matrix input, or catch an error if input are invalid.
  # SYNOPSIS
  #   addMulInputChecker OPERATION MATRIX_LEFT MATRIX_RIGHT
  # DESCRIPTION
  #   Input checker for add and multiply functions.
  #   If matrices count does not equal to 2, print error message. 
  #   If matrices count is 2, but the either file is not readable, print error message. 
  #   If add operation and dimensions of input matrices are not matched, print error message.
  #   If multiply operation and dimensions of input matrices are not valid, print error message.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	if [ "$#" -ne "3" ] # The number of matrices does not equal to 2.
	then
	    echo "The number of arguments is INVALID!!" >&2 # Error to stderr and return 1.
	    return 1
	else # The number of matrices is 2.
	    # Check if both input files are readable.
	    if [ -f "$2" ] && [ -f "$3" ] # If both files are readable
	    then
		echo "Both files are exists" >/dev/null # Yes, both files readable. Do nothing.
	    else
		echo "Some files are NOT readable!! Check the names of input files." >&2 # Either file is not readable. Error to stderr and return 1.
		return 1
	    fi

	    # After we check both files are readable, we should
	    # check if the dimensions of two input matrices are valid for add and multiply operations. 
	    dimsMatrixLeft=$(dims "$2") # Dimensions of left matrix
	    dimsMatrixRight=$(dims "$3") # Dimensions of right matrix

	    # Check dimensions for add operation
	    if [ "$1" == "add" ]
	    then
	        if [ "$dimsMatrixLeft" == "$dimsMatrixRight" ] # Check dimensions of two matrices if these are exactly matched with each other.
	        then
		    echo "Dimensions are matched" >/dev/null # Dims are matched, keep going.
	        else
		    echo "Dimensions of two matrices are NOT matched!!" >&2 # Dimensions are not matched. Error to stederr and return 1.
		    return 1
	        fi
	    # Check dimensions for multiply operation
	    elif [ "$1" == "mul" ]
	    then
		leftMatCol=$(echo $dimsMatrixLeft | cut -d " " -f 2) # Number of column of left matrix
		rightMatRow=$(echo $dimsMatrixRight | cut -d " " -f 1) # Number of row of right matrix

		if [ "$leftMatCol" == "$rightMatRow" ] # If these numbers are matched, which means two matrices are multipliable together,
		then
		    echo "Multiplication rule is not violoated." >/dev/null # Do nothing.
		else # If these numbers are not matched,
		    echo "Matrices can NOT be multiplied together!!" >&2 # Two matrices are not multipliable together. Error to stderr and return 1.
		    return 1
		fi
	    fi
	fi
}

function add(){
  # NAME
  #   add - Outputs the sum of two matrices.
  # SYNOPSIS
  #   add MATRIX_LEFT MATRIX_RIGHT
  # DESCRIPTION
  #   Prints out the sum of two matrices with the same dimensions.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	# Execute input checking function
	addMulInputChecker "add" "${@:1}"

	if [ $? -eq 1 ] # If there is an error caught by addMulInputChecker, return 1.
	then
	    return 1
	else # Implement add operation
	    # Process:
	    # Simultaneously loop through rows of both matrices, and put both lines to a temp file.
	    # Then, traverse every column as a whole in the temp file and cut each column by field. 
	    # Calculate the sum of each column by iterating through the values in the variable.
	    # Print out the sum in matrix form.
	    # Repeat this for all rows. 
	    #
	    #   ------>-------->-------->-------->-------->-------->
	    #
	    #  =>1 2 3 | =>10 10 10 |    1  2  3      |    11 12 13          
	    #    4 5 6 |   10 10 10 |    10 10 10     |              
	    #    7 8 9 |   10 10 10 |                 |
	    #   <left> |    <right> |    <temp>       |     <echo>      
	    #      		       (cut by field) |  (after sum each column)
	    #
  	    #   and so on..
	    #   ------>-------->-------->-------->-------->-------->
	    #   start						end
	    #
	    #
	    rowNum=$(wc -l <"$1") # Count number of rows of input file.
	    firstline=$(head -n 1 "$1") # First line of input file.
	    colNum=$(wc -w <<<"$firstline") # Count number of words in the first line, which represents the number of columns.

	    while read left # Loop left matrix by row.
	    do
		read right <&3 # Read a row in right matrix that was sent to the file descriptor 3.

		temp="tempfile$$" # A temp file to store rows from left and right matrices.
		# Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
		trap "rm -f $temp; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM

		echo "$left" > "$temp" # Append a line from left matrix to temp.
		echo "$right" >> "$temp" # Append a line from right matrix to temp.
		
		# Calculate sum of columns in temp. 
		i=0
		while [ "$i" -lt "$colNum" ] # Traverse columns of temp file.
		do
		    ((i++))
		    col=$(cut -f "$i" "$temp") # Cut column by field and store it to a variable.
		    sum=0 # Sum of values in a column.

		    for val in $col # Loop through values and calculate sum.
		    do
			sum=`expr $sum + $val`
		    done

		    echo -n "$sum" # Echo the sum.
		    
	            # This is to properly print out the values in matrix form.
		    if [ "$i" -ne "$colNum" ] # Unless it is not the last column,
		    then
			echo -ne "\t" # add a tab after the sum.
		    else # If it is the last column,
			echo # add a new line.
		    fi
		done

		rm -f "$temp" # Delete a temp file.
	    done <"$1" 3<"$2" # While loop takes in two arguments, left and right matrix. Right matrix is sent to file descriptor 3.   

	    return 0 # Program implemented as desired.
	fi
}

function multiply(){
  # NAME
  #   multiply - Outputs the products of two matrices.
  # SYNOPSIS
  #   multiply MATRIX_LEFT MATRIX_RIGHT
  # DESCRIPTION
  #   Prints out the products of two matrices.
  # AUTHOR
  #   Written by Kyeong-nam Kim

	# Execute input checking function
	addMulInputChecker "mul" "${@:1}"

	if [ $? -eq 1 ] # If there is an error caught by addMulInputChecker, return 1.
	then
	    return 1
	else # Implement multiply operation
	    # Process:
	    # To begin with, I chose to transpose one of the input matrices (right matrix for this algorithm) to efficiently calculate the sum of multiplied values with bash. 
	    # First step is transposing right input matrix and put it to a variable.
	    # Because we should match every row in matrix with every column in another one, we need two loops, one for left, another for transposed right matrix.
	    # While traversing left matrix and transposed right matrix, we append both lines to a temp file.
	    # Cut a column by field and multiply values, and add it to total sum.
	    # Print out the sum in matrix form.
	    # Repeat this for all rows in left matrix.
	    #
	    #   Transpose right matrix-->---->---->---->---->---->
	    #   <left> |  <right>     <transposed right>
	    #   1 2 3  |    7 6            7 8 9
	    #   5 6 7  |    8 5    ->      6 5 4
	    #          |    9 4
	    # 
	    #   Calculate first value--->---->---->---->---->---->---->---->---->
	    #   <left> | <transposed right> |       <temp>        |   <echo>         
	    # =>1 2 3  |    =>7 8 9         |       1 2 3         |   50 
	    #   5 6 7  |      6 5 4         |       7 8 9         |
	    #          |                    |                     |
	    #                                (cut by field          (1x7+2x8+3x9)
	    #                                and multiply values) 
	    #   Calculate second value-->---->---->---->---->---->---->---->---->
	    #   <left> | <transposed right> |       <temp>        |   <echo>         
	    # =>1 2 3  |      7 8 9         |       1 2 3         |   50 28
	    #   5 6 7  |    =>6 5 4         |       6 5 4         |
	    #          |                    |                     |
	    #                                (cut by field          (1x6+2x5+3x4)
	    #                                and multiply values) 
	    # 
	    # 
	    #   and so on..
	    #   ---->---->---->---->---->---->---->---->---->---->---->---->---->

	    transRightMatrix=$(transpose "$2") # Transpose the right matrix. 

	    dimsLeft=$(dims "$1") # Dimensions of left matrix.
	    dimsRight=$(dims "$2") # Dimensions of right matrix.
	    leftColNum=$(echo "$dimsLeft" | cut -d " " -f 2) # Number of columns in left matrix.
	    rightColNum=$(echo "$dimsRight" | cut -d " " -f 2) # Number of columns in right matrix.

	    while read leftLine # Read rows in left matrix.
	    do
		i=0 # To count the number of columns of transposed right matrix so we can properly put newlines when printing out the result.
		while read rightLine # Read rows in transposed right matrix.
		do
		    ((i++))
		    temp="tempfile$$" # A temp file to store rows from left and transposed right matrices.
		    # Trap signals of INT, HUP, and TERM when the program is interrupted, and delete a temp file and exit the program.
		    trap "rm -f $temp; echo 'Program is interrupted. Temp file is deleting and exiting.'; exit 1" INT HUP TERM
		    
		    echo "$leftLine" > "$temp" # Append a line from left matrix to temp.
		    echo "$rightLine" >> "$temp" # Append a line from transposed right matrix to temp.

		    j=0  # To count the number of columns in left matrix for cutting columns in temp file.
		    sum=0 # The total sum of multiplied values.
		    while [ "$j" -ne "$leftColNum" ]
		    do
			((j++))	
			leftMatVal=$(cut -f "$j" "$temp" | head -n 1) # Get a single integer value in left matrix.
			rightMatVal=$(cut -f "$j" "$temp" | tail -n 1) # Get a single integer value in transposed right matrix.
			mulVal=`expr $leftMatVal \* $rightMatVal` # Multiply two values to be added to total sum.
			sum=`expr $sum + $mulVal` # Add multiplied value to total sum.
		    done 
		    
		    echo -n "$sum" # Prints out total sum.
		    
		    # This is to properly print out the values in matrix form.
		    if [ "$i" -ne "$rightColNum" ] # Unless it is not the last column,
		    then
			echo -ne "\t" # add a tab after the sum.
		    else # If it is the last column,
			echo # add a new line.
		    fi

		    rm -f "$temp" # Delete a temp file.

		done <<<"$transRightMatrix" # Read a string value for transposed right matrix.
	    done <"$1" # Read left matrix.

	    return 0 # Program implemented as desired.
	fi
}

# Implement an operation with matrix/matrices as arguemnts.
# OPERATION MATRIX/MATRICES
$1 "${@:2}"
